// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// bpr_likelihood
double bpr_likelihood(const arma::vec& w, const arma::mat& H, const arma::mat& data, const double lambda, const bool is_NLL);
RcppExport SEXP _BPRMeth_bpr_likelihood(SEXP wSEXP, SEXP HSEXP, SEXP dataSEXP, SEXP lambdaSEXP, SEXP is_NLLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type H(HSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_NLL(is_NLLSEXP);
    rcpp_result_gen = Rcpp::wrap(bpr_likelihood(w, H, data, lambda, is_NLL));
    return rcpp_result_gen;
END_RCPP
}
// bpr_gradient
Rcpp::NumericVector bpr_gradient(const arma::vec& w, const arma::mat& H, const arma::mat& data, const double lambda, const bool is_NLL);
RcppExport SEXP _BPRMeth_bpr_gradient(SEXP wSEXP, SEXP HSEXP, SEXP dataSEXP, SEXP lambdaSEXP, SEXP is_NLLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type H(HSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_NLL(is_NLLSEXP);
    rcpp_result_gen = Rcpp::wrap(bpr_gradient(w, H, data, lambda, is_NLL));
    return rcpp_result_gen;
END_RCPP
}
// bpr_lik_region
Rcpp::NumericVector bpr_lik_region(const arma::vec& w, const Rcpp::List& x, const Rcpp::List& des_mat, const double lambda, const bool is_NLL);
RcppExport SEXP _BPRMeth_bpr_lik_region(SEXP wSEXP, SEXP xSEXP, SEXP des_matSEXP, SEXP lambdaSEXP, SEXP is_NLLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type des_mat(des_matSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_NLL(is_NLLSEXP);
    rcpp_result_gen = Rcpp::wrap(bpr_lik_region(w, x, des_mat, lambda, is_NLL));
    return rcpp_result_gen;
END_RCPP
}
// bpr_lik_resp
Rcpp::NumericMatrix bpr_lik_resp(const arma::mat& w, const Rcpp::List& x, const Rcpp::List& des_mat, const arma::vec pi_k, const double lambda, const bool is_NLL);
RcppExport SEXP _BPRMeth_bpr_lik_resp(SEXP wSEXP, SEXP xSEXP, SEXP des_matSEXP, SEXP pi_kSEXP, SEXP lambdaSEXP, SEXP is_NLLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type des_mat(des_matSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type pi_k(pi_kSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_NLL(is_NLLSEXP);
    rcpp_result_gen = Rcpp::wrap(bpr_lik_resp(w, x, des_mat, pi_k, lambda, is_NLL));
    return rcpp_result_gen;
END_RCPP
}
// sum_weighted_bpr_lik
double sum_weighted_bpr_lik(const arma::vec& w, const Rcpp::List& x, const Rcpp::List& des_mat, const arma::vec& post_prob, const double lambda, const bool is_NLL);
RcppExport SEXP _BPRMeth_sum_weighted_bpr_lik(SEXP wSEXP, SEXP xSEXP, SEXP des_matSEXP, SEXP post_probSEXP, SEXP lambdaSEXP, SEXP is_NLLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type des_mat(des_matSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type post_prob(post_probSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_NLL(is_NLLSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_weighted_bpr_lik(w, x, des_mat, post_prob, lambda, is_NLL));
    return rcpp_result_gen;
END_RCPP
}
// sum_weighted_bpr_grad
arma::rowvec sum_weighted_bpr_grad(const arma::vec& w, const Rcpp::List& x, const Rcpp::List& des_mat, const arma::vec& post_prob, const double lambda, const bool is_NLL);
RcppExport SEXP _BPRMeth_sum_weighted_bpr_grad(SEXP wSEXP, SEXP xSEXP, SEXP des_matSEXP, SEXP post_probSEXP, SEXP lambdaSEXP, SEXP is_NLLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type des_mat(des_matSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type post_prob(post_probSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_NLL(is_NLLSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_weighted_bpr_grad(w, x, des_mat, post_prob, lambda, is_NLL));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BPRMeth_bpr_likelihood", (DL_FUNC) &_BPRMeth_bpr_likelihood, 5},
    {"_BPRMeth_bpr_gradient", (DL_FUNC) &_BPRMeth_bpr_gradient, 5},
    {"_BPRMeth_bpr_lik_region", (DL_FUNC) &_BPRMeth_bpr_lik_region, 5},
    {"_BPRMeth_bpr_lik_resp", (DL_FUNC) &_BPRMeth_bpr_lik_resp, 6},
    {"_BPRMeth_sum_weighted_bpr_lik", (DL_FUNC) &_BPRMeth_sum_weighted_bpr_lik, 6},
    {"_BPRMeth_sum_weighted_bpr_grad", (DL_FUNC) &_BPRMeth_sum_weighted_bpr_grad, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_BPRMeth(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
